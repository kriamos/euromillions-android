package com.euromillions.application;import java.io.IOException;import java.io.InputStream;import java.util.Properties;import android.app.Application;import android.content.Context;import android.content.SharedPreferences;import com.euromillions.R;public class EuromillionsApplication extends Application {		public static final class SHARED_PROPERTIES{		public static final int 			DATAUPDATE_URL_NUMBERS=0,			DATAUPDATE_URL_STARS=1,			DATAUPDATE_NEXT_UPDATE_DATE=2,			DATAUPDATE_AUTOUPDATE=3,			NAME_FILE_STARS=4,			TITLE_FILE_STARS=5,			NAME_FILE_NUMBERS=6,			TITLE_FILE_NUMBERS=7,			DATAUPDATE_LAST_UPDATE_DATE=8;				private static final String[][] PROPRETIES_VALUES= {			{"dataupdate.urlNumbers","false"},			{"dataupdate.ulrStars","false"},			{"dataupdate.nextupdatedate","true"},			{"dataupdate.autoupdate","true"},			{"nameFileStars","false"},			{"titleFileStars","false"},			{"nameFileNumbers","false"},			{"titleFileNumbers","false"},			{"dataupdate.lastupdatedate","true"},		};				protected static String[] getAllProperties(){			 String[] properties = new String[PROPRETIES_VALUES.length];			 for(int propertyPosition=0;propertyPosition<properties.length;propertyPosition++){				 properties[propertyPosition] = PROPRETIES_VALUES[propertyPosition][0];			 }			 return properties;		}					public static String getPropertyValue(int property){			return PROPRETIES_VALUES[property][0];		}		public static boolean isEditable(int property){			return new Boolean(PROPRETIES_VALUES[property][1]).booleanValue();		}	}				private final static String SHARED_PROPERTY_FILE_NAME = "euromillions.config";	private final static String PROPERTY_NOT_VALUE_EXIST_STRING = "";	private final static String PROPERTY_NOT_VALUE_EXIST_NUMBER = "0";	private final static String PROPERTY_NOT_VALUE_EXIST_BOOLEAN = "false";		private SharedPreferences sharedPreferences = null;		private static EuromillionsApplication euromillionsApplication = null;		public EuromillionsApplication(){		euromillionsApplication = this;	}			private static EuromillionsApplication getInstance(){		if(euromillionsApplication==null){			euromillionsApplication = new EuromillionsApplication();		}		return euromillionsApplication; 	}				public void onCreate(){		euromillionsApplication.loadProperties() ;    }			public static Context getContext(){		return getInstance().getApplicationContext();	}		private void loadProperties() {		try{			boolean b = euromillionsApplication.existSharedPropertyFile();			//if(!b){ TODO when finish development and property file modification uncomment this				euromillionsApplication.loadPropertiesInSharedPreferences();		//	}		}catch(IOException e){			euromillionsApplication.sharedPreferences = getSharedPreferences(SHARED_PROPERTY_FILE_NAME, Context.MODE_PRIVATE);		}	}			public static void resetProperties() throws IOException{		euromillionsApplication.loadPropertiesInSharedPreferences();	}			public static String getSharedPropertyValue(int sharedProperty){		return euromillionsApplication.sharedPreferences.getString(SHARED_PROPERTIES.getPropertyValue(sharedProperty), 			PROPERTY_NOT_VALUE_EXIST_STRING);	}		public static long getSharedPropertyValueAsLong(int sharedProperty){		return Long.parseLong(euromillionsApplication.sharedPreferences.getString(SHARED_PROPERTIES.getPropertyValue(sharedProperty),		 	PROPERTY_NOT_VALUE_EXIST_NUMBER));	}		public static int getSharedPropertyValueAsInt(int sharedProperty){		return Integer.parseInt(euromillionsApplication.sharedPreferences.getString(SHARED_PROPERTIES.getPropertyValue(sharedProperty),		 	PROPERTY_NOT_VALUE_EXIST_NUMBER));	}		public static boolean getSharedPropertyValueAsBoolean(int sharedProperty){		return Boolean.valueOf(euromillionsApplication.sharedPreferences.getString(SHARED_PROPERTIES.getPropertyValue(sharedProperty),		 	PROPERTY_NOT_VALUE_EXIST_BOOLEAN));	}		public static void setSharedPropertyValue(int property, String sharedPropertyValue){		if(SHARED_PROPERTIES.isEditable(property)){			SharedPreferences.Editor editor = euromillionsApplication.sharedPreferences.edit();			editor.putString(SHARED_PROPERTIES.getPropertyValue(property), sharedPropertyValue);			editor.commit();		}	}		private boolean existSharedPropertyFile(){		euromillionsApplication.sharedPreferences = euromillionsApplication.getSharedPreferences(				SHARED_PROPERTY_FILE_NAME, Context.MODE_PRIVATE);		return (euromillionsApplication.sharedPreferences.getAll().size() != 0);	}		private void loadPropertiesInSharedPreferences() throws IOException{		if(euromillionsApplication.sharedPreferences == null) {			euromillionsApplication.sharedPreferences = euromillionsApplication.getSharedPreferences(SHARED_PROPERTY_FILE_NAME, Context.MODE_PRIVATE);		}		euromillionsApplication.fillEditorWhitDefaultPropertyFile();	}		private void fillEditorWhitDefaultPropertyFile()throws IOException{		SharedPreferences.Editor editor = euromillionsApplication.sharedPreferences.edit();		editor.clear();		Properties defaultPropertyFile = euromillionsApplication.loadDefaultPropertyFileName();		String[] properties = SHARED_PROPERTIES.getAllProperties();		for(String actualPropety:properties){			String propertyValue = defaultPropertyFile.getProperty(actualPropety);			editor.putString(actualPropety, propertyValue);		}		editor.commit();	}		private Properties loadDefaultPropertyFileName() throws IOException{		Properties properties = new Properties();		InputStream in = euromillionsApplication.getResources().openRawResource(R.raw.euromillions);		properties.load(in);		in.close();		return properties;	}	}
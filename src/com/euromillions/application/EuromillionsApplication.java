package com.euromillions.application;import java.io.IOException;import java.io.InputStream;import java.util.Enumeration;import java.util.Properties;import com.euromillions.R;import android.app.Application;import android.content.Context;import android.content.SharedPreferences;public class EuromillionsApplication extends Application {		private final static String SHARED_PROPERTY_FILE_NAME = "euromillions.config";	private final static String PROPERTY_NOT_VALUE_EXIST_STRING = "";	private final static String PROPERTY_NOT_VALUE_EXIST_NUMBER = "0";	private final static String PROPERTY_NOT_VALUE_EXIST_BOOLEAN = "false";		//private static Context context;	private SharedPreferences sharedPreferences = null;		private static EuromillionsApplication euromillionsApplication = null;		public EuromillionsApplication(){		euromillionsApplication = this;	}			private static EuromillionsApplication getInstance(){		if(euromillionsApplication==null){			euromillionsApplication = new EuromillionsApplication();		}		return euromillionsApplication;	}				public void onCreate(){        //EuromillionsApplication.context = getApplicationContext();		euromillionsApplication.loadProperties() ;    }			public static Context getContext(){		return getInstance().getApplicationContext();	}		private void loadProperties() {		try{			boolean b = euromillionsApplication.existSharedPropertyFile();			//if(!b){				euromillionsApplication.loadPropertiesInSharedPreferences();		//	}		}catch(IOException e){			euromillionsApplication.sharedPreferences = getSharedPreferences(SHARED_PROPERTY_FILE_NAME, Context.MODE_PRIVATE);		}	}			public static void resetProperties() throws IOException{		euromillionsApplication.loadPropertiesInSharedPreferences();	}		public static String getSharedPropertyValue(String sharedProperty){		return euromillionsApplication.sharedPreferences.getString(sharedProperty, PROPERTY_NOT_VALUE_EXIST_STRING);	}		public static long getSharedPropertyValueAsLong(String sharedProperty){		return Long.parseLong(euromillionsApplication.sharedPreferences.getString(sharedProperty, PROPERTY_NOT_VALUE_EXIST_NUMBER));	}		public static int getSharedPropertyValueAsInt(String sharedProperty){		return Integer.parseInt(euromillionsApplication.sharedPreferences.getString(sharedProperty, PROPERTY_NOT_VALUE_EXIST_NUMBER));	}		public static boolean getSharedPropertyValueAsBoolean(String sharedProperty){		return Boolean.valueOf(euromillionsApplication.sharedPreferences.getString(sharedProperty, PROPERTY_NOT_VALUE_EXIST_BOOLEAN));	}		public static void setSharedPropertyValue(String sharedProperty, String sharedPropertyValue){		SharedPreferences.Editor editor = euromillionsApplication.sharedPreferences.edit();		editor.putString(sharedProperty, sharedPropertyValue);		editor.commit();	}		private boolean existSharedPropertyFile(){		//sharedPreferences = context.getSharedPreferences(SHARED_PROPERTY_FILE_NAME, Context.MODE_PRIVATE);		euromillionsApplication.sharedPreferences = euromillionsApplication.getSharedPreferences(SHARED_PROPERTY_FILE_NAME, Context.MODE_PRIVATE);		return (euromillionsApplication.sharedPreferences.getAll().size() != 0);	}		private void loadPropertiesInSharedPreferences() throws IOException{		if(euromillionsApplication.sharedPreferences == null) {			//sharedPreferences = context.getSharedPreferences(SHARED_PROPERTY_FILE_NAME, Context.MODE_PRIVATE);			euromillionsApplication.sharedPreferences = euromillionsApplication.getSharedPreferences(SHARED_PROPERTY_FILE_NAME, Context.MODE_PRIVATE);		}		euromillionsApplication.fillEditorWhitDefaultPropertyFile();	}		private void fillEditorWhitDefaultPropertyFile()throws IOException{		SharedPreferences.Editor editor = euromillionsApplication.sharedPreferences.edit();		editor.clear();		Properties defaultPropertyFile = euromillionsApplication.loadDefaultPropertyFileName();		Enumeration<Object> enumerationKeys = defaultPropertyFile.keys();		while(enumerationKeys.hasMoreElements()){			String key = (String)enumerationKeys.nextElement();			String value = (String)defaultPropertyFile.getProperty(key);			editor.putString(key, value);		}		editor.commit();	}		private Properties loadDefaultPropertyFileName() throws IOException{		Properties properties = new Properties();		//InputStream in = context.getResources().openRawResource(R.raw.euromillions);		InputStream in = euromillionsApplication.getResources().openRawResource(R.raw.euromillions);		properties.load(in);		in.close();		return properties;	}	}